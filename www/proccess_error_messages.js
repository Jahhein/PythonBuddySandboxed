const pylint_data = ":blacklisted-name (C0102): *Black listed name \"%s\"*\r\n  Used when the name is listed in the black list (unauthorized names).\r\n:invalid-name (C0103): *%s name \"%s\" doesn't conform to %s*\r\n  Used when the name doesn't conform to naming rules associated to its type\r\n  (constant, variable, class...).\r\n:missing-docstring (C0111): *Missing %s docstring*\r\n  Used when a module, function, class or method has no docstring.Some special\r\n  methods like __init__ doesn't necessary require a docstring.\r\n:empty-docstring (C0112): *Empty %s docstring*\r\n  Used when a module, function, class or method has an empty docstring (it would\r\n  be too easy ;).\r\n:unneeded-not (C0113): *Consider changing \"%s\" to \"%s\"*\r\n  Used when a boolean expression contains an unneeded negation.\r\n:singleton-comparison (C0121): *Comparison to %s should be %s*\r\n  Used when an expression is compared to singleton values like True, False or\r\n  None.\r\n:misplaced-comparison-constant (C0122): *Comparison should be %s*\r\n  Used when the constant is placed on the left side of a comparison. It is\r\n  usually clearer in intent to place it in the right hand side of the\r\n  comparison.\r\n:unidiomatic-typecheck (C0123): *Using type() instead of isinstance() for a typecheck.*\r\n  The idiomatic way to perform an explicit typecheck in Python is to use\r\n  isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are\r\n  unusual situations where these give different results.\r\n:consider-using-enumerate (C0200): *Consider using enumerate instead of iterating with range and len*\r\n  Emitted when code that iterates with range and len is encountered. Such code\r\n  can be simplified by using the enumerate builtin.\r\n:consider-iterating-dictionary (C0201): *Consider iterating the dictionary directly instead of calling .keys()*\r\n  Emitted when the keys of a dictionary are iterated through the .keys() method.\r\n  It is enough to just iterate through the dictionary itself, as in \"for key in\r\n  dictionary\".\r\n:bad-classmethod-argument (C0202): *Class method %s should have %s as first argument*\r\n  Used when a class method has a first argument named differently than the value\r\n  specified in valid-classmethod-first-arg option (default to \"cls\"),\r\n  recommended to easily differentiate them from regular instance methods.\r\n:bad-mcs-method-argument (C0203): *Metaclass method %s should have %s as first argument*\r\n  Used when a metaclass method has a first argument named differently than the\r\n  value specified in valid-classmethod-first-arg option (default to \"cls\"),\r\n  recommended to easily differentiate them from regular instance methods.\r\n:bad-mcs-classmethod-argument (C0204): *Metaclass class method %s should have %s as first argument*\r\n  Used when a metaclass class method has a first argument named differently than\r\n  the value specified in valid-metaclass-classmethod-first-arg option (default\r\n  to \"mcs\"), recommended to easily differentiate them from regular instance\r\n  methods.\r\n:single-string-used-for-slots (C0205): *Class __slots__ should be a non-string iterable*\r\n  Used when a class __slots__ is a simple string, rather than an iterable.\r\n:line-too-long (C0301): *Line too long (%s/%s)*\r\n  Used when a line is longer than a given number of characters.\r\n:too-many-lines (C0302): *Too many lines in module (%s/%s)*\r\n  Used when a module has too many lines, reducing its readability.\r\n:trailing-whitespace (C0303): *Trailing whitespace*\r\n  Used when there is whitespace between the end of a line and the newline.\r\n:missing-final-newline (C0304): *Final newline missing*\r\n  Used when the last line in a file is missing a newline.\r\n:trailing-newlines (C0305): *Trailing newlines*\r\n  Used when there are trailing blank lines in a file.\r\n:multiple-statements (C0321): *More than one statement on a single line*\r\n  Used when more than on statement are found on the same line.\r\n:superfluous-parens (C0325): *Unnecessary parens after %r keyword*\r\n  Used when a single item in parentheses follows an if, for, or other keyword.\r\n:bad-whitespace (C0326): *%s space %s %s %s*\r\n  Used when a wrong number of spaces is used around an operator, bracket or\r\n  block opener.\r\n:mixed-line-endings (C0327): *Mixed line endings LF and CRLF*\r\n  Used when there are mixed (LF and CRLF) newline signs in a file.\r\n:unexpected-line-ending-format (C0328): *Unexpected line ending format. There is '%s' while it should be '%s'.*\r\n  Used when there is different newline than expected.\r\n:bad-continuation (C0330): *Wrong %s indentation%s%s.*\r\n  TODO\r\n:wrong-spelling-in-comment (C0401): *Wrong spelling of a word '%s' in a comment:*\r\n  Used when a word in comment is not spelled correctly.\r\n:wrong-spelling-in-docstring (C0402): *Wrong spelling of a word '%s' in a docstring:*\r\n  Used when a word in docstring is not spelled correctly.\r\n:invalid-characters-in-docstring (C0403): *Invalid characters %r in a docstring*\r\n  Used when a word in docstring cannot be checked by enchant.\r\n:multiple-imports (C0410): *Multiple imports on one line (%s)*\r\n  Used when import statement importing multiple modules is detected.\r\n:wrong-import-order (C0411): *%s should be placed before %s*\r\n  Used when PEP8 import order is not respected (standard imports first, then\r\n  third-party libraries, then local imports)\r\n:ungrouped-imports (C0412): *Imports from package %s are not grouped*\r\n  Used when imports are not grouped by packages\r\n:wrong-import-position (C0413): *Import \"%s\" should be placed at the top of the module*\r\n  Used when code and imports are mixed\r\n:useless-import-alias (C0414): *Import alias does not rename original package*\r\n  Used when an import alias is same as original package.e.g using import numpy\r\n  as numpy instead of import numpy as np\r\n:len-as-condition (C1801): *Do not use `len(SEQUENCE)` to determine if a sequence is empty*\r\n  Used when Pylint detects that len(sequence) is being used inside a condition\r\n  to determine if a sequence is empty. Instead of comparing the length to 0,\r\n  rely on the fact that empty sequences are false.\r\n:syntax-error (E0001):\r\n  Used when a syntax error is raised for a module.\r\n:unrecognized-inline-option (E0011): *Unrecognized file option %r*\r\n  Used when an unknown inline option is encountered.\r\n:bad-option-value (E0012): *Bad option value %r*\r\n  Used when a bad value for an inline option is encountered.\r\n:init-is-generator (E0100): *__init__ method is a generator*\r\n  Used when the special class method __init__ is turned into a generator by a\r\n  yield in its body.\r\n:return-in-init (E0101): *Explicit return in __init__*\r\n  Used when the special class method __init__ has an explicit return value.\r\n:function-redefined (E0102): *%s already defined line %s*\r\n  Used when a function / class / method is redefined.\r\n:not-in-loop (E0103): *%r not properly in loop*\r\n  Used when break or continue keywords are used outside a loop.\r\n:return-outside-function (E0104): *Return outside function*\r\n  Used when a \"return\" statement is found outside a function or method.\r\n:yield-outside-function (E0105): *Yield outside function*\r\n  Used when a \"yield\" statement is found outside a function or method.\r\n:nonexistent-operator (E0107): *Use of the non-existent %s operator*\r\n  Used when you attempt to use the C-style pre-increment or pre-decrement\r\n  operator -- and ++, which doesn't exist in Python.\r\n:duplicate-argument-name (E0108): *Duplicate argument name %s in function definition*\r\n  Duplicate argument names in function definitions are syntax errors.\r\n:abstract-class-instantiated (E0110): *Abstract class %r with abstract methods instantiated*\r\n  Used when an abstract class with `abc.ABCMeta` as metaclass has abstract\r\n  methods and is instantiated.\r\n:bad-reversed-sequence (E0111): *The first reversed() argument is not a sequence*\r\n  Used when the first argument to reversed() builtin isn't a sequence (does not\r\n  implement __reversed__, nor __getitem__ and __len__\r\n:too-many-star-expressions (E0112): *More than one starred expression in assignment*\r\n  Emitted when there are more than one starred expressions (`*x`) in an\r\n  assignment. This is a SyntaxError.\r\n:invalid-star-assignment-target (E0113): *Starred assignment target must be in a list or tuple*\r\n  Emitted when a star expression is used as a starred assignment target.\r\n:star-needs-assignment-target (E0114): *Can use starred expression only in assignment target*\r\n  Emitted when a star expression is not used in an assignment target.\r\n:nonlocal-and-global (E0115): *Name %r is nonlocal and global*\r\n  Emitted when a name is both nonlocal and global.\r\n:continue-in-finally (E0116): *'continue' not supported inside 'finally' clause*\r\n  Emitted when the `continue` keyword is found inside a finally clause, which is\r\n  a SyntaxError.\r\n:nonlocal-without-binding (E0117): *nonlocal name %s found without binding*\r\n  Emitted when a nonlocal variable does not have an attached name somewhere in\r\n  the parent scopes\r\n:used-prior-global-declaration (E0118): *Name %r is used prior to global declaration*\r\n  Emitted when a name is used prior a global declaration, which results in an\r\n  error since Python 3.6. This message can't be emitted when using Python < 3.6.\r\n:misplaced-format-function (E0119): *format function is not called on str*\r\n  Emitted when format function is not called on str object. e.g doing\r\n  print(\"value: {}\").format(123) instead of print(\"value: {}\".format(123)). This\r\n  might not be what the user intended to do.\r\n:method-hidden (E0202): *An attribute defined in %s line %s hides this method*\r\n  Used when a class defines a method which is hidden by an instance attribute\r\n  from an ancestor class or set by some client code.\r\n:access-member-before-definition (E0203): *Access to member %r before its definition line %s*\r\n  Used when an instance member is accessed before it's actually assigned.\r\n:no-method-argument (E0211): *Method has no argument*\r\n  Used when a method which should have the bound instance as first argument has\r\n  no argument defined.\r\n:no-self-argument (E0213): *Method should have \"self\" as first argument*\r\n  Used when a method has an attribute different the \"self\" as first argument.\r\n  This is considered as an error since this is a so common convention that you\r\n  shouldn't break it!\r\n:invalid-slots-object (E0236): *Invalid object %r in __slots__, must contain only non empty strings*\r\n  Used when an invalid (non-string) object occurs in __slots__.\r\n:assigning-non-slot (E0237): *Assigning to attribute %r not defined in class slots*\r\n  Used when assigning to an attribute not defined in the class slots.\r\n:invalid-slots (E0238): *Invalid __slots__ object*\r\n  Used when an invalid __slots__ is found in class. Only a string, an iterable\r\n  or a sequence is permitted.\r\n:inherit-non-class (E0239): *Inheriting %r, which is not a class.*\r\n  Used when a class inherits from something which is not a class.\r\n:inconsistent-mro (E0240): *Inconsistent method resolution order for class %r*\r\n  Used when a class has an inconsistent method resolution order.\r\n:duplicate-bases (E0241): *Duplicate bases for class %r*\r\n  Used when a class has duplicate bases.\r\n:non-iterator-returned (E0301): *__iter__ returns non-iterator*\r\n  Used when an __iter__ method returns something which is not an iterable (i.e.\r\n  has no `__next__` method)\r\n:unexpected-special-method-signature (E0302): *The special method %r expects %s param(s), %d %s given*\r\n  Emitted when a special method was defined with an invalid number of\r\n  parameters. If it has too few or too many, it might not work at all.\r\n:invalid-length-returned (E0303): *__len__ does not return non-negative integer*\r\n  Used when a __len__ method returns something which is not a non-negative\r\n  integer\r\n:import-error (E0401): *Unable to import %s*\r\n  Used when pylint has been unable to import a module.\r\n:relative-beyond-top-level (E0402): *Attempted relative import beyond top-level package*\r\n  Used when a relative import tries to access too many levels in the current\r\n  package.\r\n:used-before-assignment (E0601): *Using variable %r before assignment*\r\n  Used when a local variable is accessed before it's assignment.\r\n:undefined-variable (E0602): *Undefined variable %r*\r\n  Used when an undefined variable is accessed.\r\n:undefined-all-variable (E0603): *Undefined variable name %r in __all__*\r\n  Used when an undefined variable name is referenced in __all__.\r\n:invalid-all-object (E0604): *Invalid object %r in __all__, must contain only strings*\r\n  Used when an invalid (non-string) object occurs in __all__.\r\n:no-name-in-module (E0611): *No name %r in module %r*\r\n  Used when a name cannot be found in a module.\r\n:unbalanced-tuple-unpacking (E0632): *Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s)*\r\n  Used when there is an unbalanced tuple unpacking in assignment\r\n:unpacking-non-sequence (E0633): *Attempting to unpack a non-sequence%s*\r\n  Used when something which is not a sequence is used in an unpack assignment\r\n:bad-except-order (E0701): *Bad except clauses order (%s)*\r\n  Used when except clauses are not in the correct order (from the more specific\r\n  to the more generic). If you don't fix the order, some exceptions may not be\r\n  caught by the most specific handler.\r\n:raising-bad-type (E0702): *Raising %s while only classes or instances are allowed*\r\n  Used when something which is neither a class, an instance or a string is\r\n  raised (i.e. a `TypeError` will be raised).\r\n:bad-exception-context (E0703): *Exception context set to something which is not an exception, nor None*\r\n  Used when using the syntax \"raise ... from ...\", where the exception context\r\n  is not an exception, nor None.\r\n:misplaced-bare-raise (E0704): *The raise statement is not inside an except clause*\r\n  Used when a bare raise is not used inside an except clause. This generates an\r\n  error, since there are no active exceptions to be reraised. An exception to\r\n  this rule is represented by a bare raise inside a finally clause, which might\r\n  work, as long as an exception is raised inside the try block, but it is\r\n  nevertheless a code smell that must not be relied upon.\r\n:raising-non-exception (E0710): *Raising a new style class which doesn't inherit from BaseException*\r\n  Used when a new style class which doesn't inherit from BaseException is\r\n  raised.\r\n:notimplemented-raised (E0711): *NotImplemented raised - should raise NotImplementedError*\r\n  Used when NotImplemented is raised instead of NotImplementedError\r\n:catching-non-exception (E0712): *Catching an exception which doesn't inherit from Exception: %s*\r\n  Used when a class which doesn't inherit from Exception is used as an exception\r\n  in an except clause.\r\n:bad-super-call (E1003): *Bad first argument %r given to super()*\r\n  Used when another argument than the current class is given as first argument\r\n  of the super builtin.\r\n:no-member (E1101): *%s %r has no %r member%s*\r\n  Used when a variable is accessed for an unexistent member.\r\n:not-callable (E1102): *%s is not callable*\r\n  Used when an object being called has been inferred to a non callable object.\r\n:assignment-from-no-return (E1111): *Assigning to function call which doesn't return*\r\n  Used when an assignment is done on a function call but the inferred function\r\n  doesn't return anything.\r\n:no-value-for-parameter (E1120): *No value for argument %s in %s call*\r\n  Used when a function call passes too few arguments.\r\n:too-many-function-args (E1121): *Too many positional arguments for %s call*\r\n  Used when a function call passes too many positional arguments.\r\n:unexpected-keyword-arg (E1123): *Unexpected keyword argument %r in %s call*\r\n  Used when a function call passes a keyword argument that doesn't correspond to\r\n  one of the function's parameter names.\r\n:redundant-keyword-arg (E1124): *Argument %r passed by position and keyword in %s call*\r\n  Used when a function call would result in assigning multiple values to a\r\n  function parameter, one value from a positional argument and one from a\r\n  keyword argument.\r\n:missing-kwoa (E1125): *Missing mandatory keyword argument %r in %s call*\r\n  Used when a function call does not pass a mandatory keyword-only argument.\r\n:invalid-sequence-index (E1126): *Sequence index is not an int, slice, or instance with __index__*\r\n  Used when a sequence type is indexed with an invalid type. Valid types are\r\n  ints, slices, and objects with an __index__ method.\r\n:invalid-slice-index (E1127): *Slice index is not an int, None, or instance with __index__*\r\n  Used when a slice index is not an integer, None, or an object with an\r\n  __index__ method.\r\n:assignment-from-none (E1128): *Assigning to function call which only returns None*\r\n  Used when an assignment is done on a function call but the inferred function\r\n  returns nothing but None.\r\n:not-context-manager (E1129): *Context manager '%s' doesn't implement __enter__ and __exit__.*\r\n  Used when an instance in a with statement doesn't implement the context\r\n  manager protocol(__enter__/__exit__).\r\n:invalid-unary-operand-type (E1130):\r\n  Emitted when a unary operand is used on an object which does not support this\r\n  type of operation.\r\n:unsupported-binary-operation (E1131):\r\n  Emitted when a binary arithmetic operation between two operands is not\r\n  supported.\r\n:repeated-keyword (E1132): *Got multiple values for keyword argument %r in function call*\r\n  Emitted when a function call got multiple values for a keyword.\r\n:not-an-iterable (E1133): *Non-iterable value %s is used in an iterating context*\r\n  Used when a non-iterable value is used in place where iterable is expected\r\n:not-a-mapping (E1134): *Non-mapping value %s is used in a mapping context*\r\n  Used when a non-mapping value is used in place where mapping is expected\r\n:unsupported-membership-test (E1135): *Value '%s' doesn't support membership test*\r\n  Emitted when an instance in membership test expression doesn't implement\r\n  membership protocol (__contains__/__iter__/__getitem__).\r\n:unsubscriptable-object (E1136): *Value '%s' is unsubscriptable*\r\n  Emitted when a subscripted value doesn't support subscription (i.e. doesn't\r\n  define __getitem__ method).\r\n:unsupported-assignment-operation (E1137): *%r does not support item assignment*\r\n  Emitted when an object does not support item assignment (i.e. doesn't define\r\n  __setitem__ method).\r\n:unsupported-delete-operation (E1138): *%r does not support item deletion*\r\n  Emitted when an object does not support item deletion (i.e. doesn't define\r\n  __delitem__ method).\r\n:invalid-metaclass (E1139): *Invalid metaclass %r used*\r\n  Emitted whenever we can detect that a class is using, as a metaclass,\r\n  something which might be invalid for using as a metaclass.\r\n:unhashable-dict-key (E1140): *Dict key is unhashable*\r\n  Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).\r\n:logging-unsupported-format (E1200): *Unsupported logging format character %r (%#02x) at index %d*\r\n  Used when an unsupported format character is used in a logging statement\r\n  format string.\r\n:logging-format-truncated (E1201): *Logging format string ends in middle of conversion specifier*\r\n  Used when a logging statement format string terminates before the end of a\r\n  conversion specifier.\r\n:logging-too-many-args (E1205): *Too many arguments for logging format string*\r\n  Used when a logging format string is given too many arguments.\r\n:logging-too-few-args (E1206): *Not enough arguments for logging format string*\r\n  Used when a logging format string is given too few arguments.\r\n:bad-format-character (E1300): *Unsupported format character %r (%#02x) at index %d*\r\n  Used when an unsupported format character is used in a format string.\r\n:truncated-format-string (E1301): *Format string ends in middle of conversion specifier*\r\n  Used when a format string terminates before the end of a conversion specifier.\r\n:mixed-format-string (E1302): *Mixing named and unnamed conversion specifiers in format string*\r\n  Used when a format string contains both named (e.g. '%(foo)d') and unnamed\r\n  (e.g. '%d') conversion specifiers. This is also used when a named conversion\r\n  specifier contains * for the minimum field width and/or precision.\r\n:format-needs-mapping (E1303): *Expected mapping for format string, not %s*\r\n  Used when a format string that uses named conversion specifiers is used with\r\n  an argument that is not a mapping.\r\n:missing-format-string-key (E1304): *Missing key %r in format string dictionary*\r\n  Used when a format string that uses named conversion specifiers is used with a\r\n  dictionary that doesn't contain all the keys required by the format string.\r\n:too-many-format-args (E1305): *Too many arguments for format string*\r\n  Used when a format string that uses unnamed conversion specifiers is given too\r\n  many arguments.\r\n:too-few-format-args (E1306): *Not enough arguments for format string*\r\n  Used when a format string that uses unnamed conversion specifiers is given too\r\n  few arguments\r\n:bad-str-strip-call (E1310): *Suspicious argument in %s.%s call*\r\n  The argument to a str.{l,r,}strip call contains a duplicate character,\r\n:invalid-envvar-value (E1507): *%s does not support %s type argument*\r\n  Env manipulation functions support only string type arguments. See\r\n  https://docs.python.org/3/library/os.html#os.getenv.\r\n:print-statement (E1601): *print statement used*\r\n  Used when a print statement is used (`print` is a function in Python 3)\r\n:parameter-unpacking (E1602): *Parameter unpacking specified*\r\n  Used when parameter unpacking is specified for a function(Python 3 doesn't\r\n  allow it)\r\n:unpacking-in-except (E1603): *Implicit unpacking of exceptions is not supported in Python 3*\r\n  Python3 will not allow implicit unpacking of exceptions in except clauses. See\r\n  http://www.python.org/dev/peps/pep-3110/\r\n:old-raise-syntax (E1604): *Use raise ErrorClass(args) instead of raise ErrorClass, args.*\r\n  Used when the alternate raise syntax 'raise foo, bar' is used instead of\r\n  'raise foo(bar)'.\r\n:backtick (E1605): *Use of the `` operator*\r\n  Used when the deprecated \"``\" (backtick) operator is used instead of the str()\r\n  function.\r\n:yield-inside-async-function (E1700): *Yield inside async function*\r\n  Used when an `yield` or `yield from` statement is found inside an async\r\n  function. This message can't be emitted when using Python < 3.5.\r\n:not-async-context-manager (E1701): *Async context manager '%s' doesn't implement __aenter__ and __aexit__.*\r\n  Used when an async context manager is used with an object that does not\r\n  implement the async context management protocol. This message can't be emitted\r\n  when using Python < 3.5.\r\n:fatal (F0001):\r\n  Used when an error occurred preventing the analysis of a module (unable to\r\n  find it for instance).\r\n:astroid-error (F0002): *%s: %s*\r\n  Used when an unexpected error occurred while building the Astroid\r\n  representation. This is usually accompanied by a traceback. Please report such\r\n  errors !\r\n:parse-error (F0010): *error while code parsing: %s*\r\n  Used when an exception occurred while building the Astroid representation\r\n  which could be handled by astroid.\r\n:method-check-failed (F0202): *Unable to check methods signature (%s / %s)*\r\n  Used when Pylint has been unable to check methods signature compatibility for\r\n  an unexpected reason. Please report this kind if you don't make sense of it.\r\n:raw-checker-failed (I0001): *Unable to run raw checkers on built-in module %s*\r\n  Used to inform that a built-in module has not been checked using the raw\r\n  checkers.\r\n:bad-inline-option (I0010): *Unable to consider inline option %r*\r\n  Used when an inline option is either badly formatted or can't be used inside\r\n  modules.\r\n:locally-disabled (I0011): *Locally disabling %s (%s)*\r\n  Used when an inline option disables a message or a messages category.\r\n:locally-enabled (I0012): *Locally enabling %s (%s)*\r\n  Used when an inline option enables a message or a messages category.\r\n:file-ignored (I0013): *Ignoring entire file*\r\n  Used to inform that the file will not be checked\r\n:suppressed-message (I0020): *Suppressed %s (from line %d)*\r\n  A message was triggered on a line, but suppressed explicitly by a disable=\r\n  comment in the file. This message is not generated for messages that are\r\n  ignored due to configuration settings.\r\n:useless-suppression (I0021): *Useless suppression of %s*\r\n  Reported when a message is explicitly disabled for a line or a block of code,\r\n  but never triggered.\r\n:deprecated-pragma (I0022): *Pragma \"%s\" is deprecated, use \"%s\" instead*\r\n  Some inline pylint options have been renamed or reworked, only the most recent\r\n  form should be used. NOTE:skip-all is only available with pylint >= 0.26\r\n:use-symbolic-message-instead (I0023):\r\n  Used when a message is enabled or disabled by id.\r\n:c-extension-no-member (I1101): *%s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-whitelist if you want to perform analysis based on run-time introspection of living objects.*\r\n  Used when a variable is accessed for non-existent member of C extension. Due\r\n  to unavailability of source static analysis is impossible, but it may be\r\n  performed by introspecting living objects in run-time.\r\n:literal-comparison (R0123): *Comparison to literal*\r\n  Used when comparing an object to a literal, which is usually what you do not\r\n  want to do, since you can compare to a different literal than what was\r\n  expected altogether.\r\n:comparison-with-itself (R0124): *Redundant comparison - %s*\r\n  Used when something is compared against itself.\r\n:no-self-use (R0201): *Method could be a function*\r\n  Used when a method doesn't use its bound instance, and so could be written as\r\n  a function.\r\n:no-classmethod-decorator (R0202): *Consider using a decorator instead of calling classmethod*\r\n  Used when a class method is defined without using the decorator syntax.\r\n:no-staticmethod-decorator (R0203): *Consider using a decorator instead of calling staticmethod*\r\n  Used when a static method is defined without using the decorator syntax.\r\n:useless-object-inheritance (R0205): *Class %r inherits from object, can be safely removed from bases in python3*\r\n  Used when a class inherit from object, which under python3 is implicit, hence\r\n  can be safely removed from bases.\r\n:cyclic-import (R0401): *Cyclic import (%s)*\r\n  Used when a cyclic import between two or more modules is detected.\r\n:duplicate-code (R0801): *Similar lines in %s files*\r\n  Indicates that a set of similar lines has been detected among multiple file.\r\n  This usually means that the code should be refactored to avoid this\r\n  duplication.\r\n:too-many-ancestors (R0901): *Too many ancestors (%s/%s)*\r\n  Used when class has too many parent classes, try to reduce this to get a\r\n  simpler (and so easier to use) class.\r\n:too-many-instance-attributes (R0902): *Too many instance attributes (%s/%s)*\r\n  Used when class has too many instance attributes, try to reduce this to get a\r\n  simpler (and so easier to use) class.\r\n:too-few-public-methods (R0903): *Too few public methods (%s/%s)*\r\n  Used when class has too few public methods, so be sure it's really worth it.\r\n:too-many-public-methods (R0904): *Too many public methods (%s/%s)*\r\n  Used when class has too many public methods, try to reduce this to get a\r\n  simpler (and so easier to use) class.\r\n:too-many-return-statements (R0911): *Too many return statements (%s/%s)*\r\n  Used when a function or method has too many return statement, making it hard\r\n  to follow.\r\n:too-many-branches (R0912): *Too many branches (%s/%s)*\r\n  Used when a function or method has too many branches, making it hard to\r\n  follow.\r\n:too-many-arguments (R0913): *Too many arguments (%s/%s)*\r\n  Used when a function or method takes too many arguments.\r\n:too-many-locals (R0914): *Too many local variables (%s/%s)*\r\n  Used when a function or method has too many local variables.\r\n:too-many-statements (R0915): *Too many statements (%s/%s)*\r\n  Used when a function or method has too many statements. You should then split\r\n  it in smaller functions / methods.\r\n:too-many-boolean-expressions (R0916): *Too many boolean expressions in if statement (%s/%s)*\r\n  Used when an if statement contains too many boolean expressions.\r\n:consider-merging-isinstance (R1701): *Consider merging these isinstance calls to isinstance(%s, (%s))*\r\n  Used when multiple consecutive isinstance calls can be merged into one.\r\n:too-many-nested-blocks (R1702): *Too many nested blocks (%s/%s)*\r\n  Used when a function or a method has too many nested blocks. This makes the\r\n  code less understandable and maintainable.\r\n:simplifiable-if-statement (R1703): *The if statement can be replaced with %s*\r\n  Used when an if statement can be replaced with 'bool(test)'.\r\n:redefined-argument-from-local (R1704): *Redefining argument with the local name %r*\r\n  Used when a local name is redefining an argument, which might suggest a\r\n  potential error. This is taken in account only for a handful of name binding\r\n  operations, such as for iteration, with statement assignment and exception\r\n  handler assignment.\r\n:no-else-return (R1705): *Unnecessary \"%s\" after \"return\"*\r\n  Used in order to highlight an unnecessary block of code following an if\r\n  containing a return statement. As such, it will warn when it encounters an\r\n  else following a chain of ifs, all of them containing a return statement.\r\n:consider-using-ternary (R1706): *Consider using ternary (%s)*\r\n  Used when one of known pre-python 2.5 ternary syntax is used.\r\n:trailing-comma-tuple (R1707): *Disallow trailing comma tuple*\r\n  In Python, a tuple is actually created by the comma symbol, not by the\r\n  parentheses. Unfortunately, one can actually create a tuple by misplacing a\r\n  trailing comma, which can lead to potential weird bugs in your code. You\r\n  should always use parentheses explicitly for creating a tuple.\r\n:stop-iteration-return (R1708): *Do not raise StopIteration in generator, use return statement instead*\r\n  According to PEP479, the raise of StopIteration to end the loop of a generator\r\n  may lead to hard to find bugs. This PEP specify that raise StopIteration has\r\n  to be replaced by a simple return statement\r\n:simplify-boolean-expression (R1709): *Boolean expression may be simplified to %s*\r\n  Emitted when redundant pre-python 2.5 ternary syntax is used.\r\n:inconsistent-return-statements (R1710): *Either all return statements in a function should return an expression, or none of them should.*\r\n  According to PEP8, if any return statement returns an expression, any return\r\n  statements where no value is returned should explicitly state this as return\r\n  None, and an explicit return statement should be present at the end of the\r\n  function (if reachable)\r\n:useless-return (R1711): *Useless return at end of function or method*\r\n  Emitted when a single \"return\" or \"return None\" statement is found at the end\r\n  of function or method definition. This statement can safely be removed because\r\n  Python will implicitly return None\r\n:consider-swap-variables (R1712): *Consider using tuple unpacking for swapping variables*\r\n  You do not have to use a temporary variable in order to swap variables. Using\r\n  \"tuple unpacking\" to directly swap variables makes the intention more clear.\r\n:consider-using-join (R1713): *Consider using str.join(sequence) for concatenating strings from an iterable*\r\n  Using str.join(sequence) is faster, uses less memory and increases readability\r\n  compared to for-loop iteration.\r\n:consider-using-in (R1714): *Consider merging these comparisons with \"in\" to %r*\r\n  To check if a variable is equal to one of many values,combine the values into\r\n  a tuple and check if the variable is contained \"in\" it instead of checking for\r\n  equality against each of the values.This is faster and less verbose.\r\n:consider-using-get (R1715): *Consider using dict.get for getting values from a dict if a key is present or a default if not*\r\n  Using the builtin dict.get for getting a value from a dictionary if a key is\r\n  present or a default if not, is simpler and considered more idiomatic,\r\n  although sometimes a bit slower\r\n:chained-comparison (R1716): *Simplify chained comparison between the operands*\r\n  This message is emitted when pylint encounters boolean operation like\"a < b\r\n  and b < c\", suggesting instead to refactor it to \"a < b < c\"\r\n:consider-using-dict-comprehension (R1717): *Consider using a dictionary comprehension*\r\n  Although there is nothing syntactically wrong with this code, it is hard to\r\n  read and can be simplified to a dict comprehension.Also it is faster since you\r\n  don't need to create another transient list\r\n:consider-using-set-comprehension (R1718): *Consider using a set comprehension*\r\n  Although there is nothing syntactically wrong with this code, it is hard to\r\n  read and can be simplified to a set comprehension.Also it is faster since you\r\n  don't need to create another transient list\r\n:unreachable (W0101): *Unreachable code*\r\n  Used when there is some code behind a \"return\" or \"raise\" statement, which\r\n  will never be accessed.\r\n:dangerous-default-value (W0102): *Dangerous default value %s as argument*\r\n  Used when a mutable value as list or dictionary is detected in a default value\r\n  for an argument.\r\n:pointless-statement (W0104): *Statement seems to have no effect*\r\n  Used when a statement doesn't have (or at least seems to) any effect.\r\n:pointless-string-statement (W0105): *String statement has no effect*\r\n  Used when a string is used as a statement (which of course has no effect).\r\n  This is a particular case of W0104 with its own message so you can easily\r\n  disable it if you're using those strings as documentation, instead of\r\n  comments.\r\n:expression-not-assigned (W0106): *Expression \"%s\" is assigned to nothing*\r\n  Used when an expression that is not a function call is assigned to nothing.\r\n  Probably something else was intended.\r\n:unnecessary-pass (W0107): *Unnecessary pass statement*\r\n  Used when a \"pass\" statement that can be avoided is encountered.\r\n:unnecessary-lambda (W0108): *Lambda may not be necessary*\r\n  Used when the body of a lambda expression is a function call on the same\r\n  argument list as the lambda itself; such lambda expressions are in all but a\r\n  few cases replaceable with the function being called in the body of the\r\n  lambda.\r\n:duplicate-key (W0109): *Duplicate key %r in dictionary*\r\n  Used when a dictionary expression binds the same key multiple times.\r\n:assign-to-new-keyword (W0111): *Name %s will become a keyword in Python %s*\r\n  Used when assignment will become invalid in future Python release due to\r\n  introducing new keyword.\r\n:useless-else-on-loop (W0120): *Else clause on loop without a break statement*\r\n  Loops should only have an else clause if they can exit early with a break\r\n  statement, otherwise the statements under else should be on the same scope as\r\n  the loop itself.\r\n:exec-used (W0122): *Use of exec*\r\n  Used when you use the \"exec\" statement (function for Python 3), to discourage\r\n  its usage. That doesn't mean you cannot use it !\r\n:eval-used (W0123): *Use of eval*\r\n  Used when you use the \"eval\" function, to discourage its usage. Consider using\r\n  `ast.literal_eval` for safely evaluating strings containing Python expressions\r\n  from untrusted sources.\r\n:confusing-with-statement (W0124): *Following \"as\" with another context manager looks like a tuple.*\r\n  Emitted when a `with` statement component returns multiple values and uses\r\n  name binding with `as` only for a part of those values, as in with ctx() as a,\r\n  b. This can be misleading, since it's not clear if the context manager returns\r\n  a tuple or if the node without a name binding is another context manager.\r\n:using-constant-test (W0125): *Using a conditional statement with a constant value*\r\n  Emitted when a conditional statement (If or ternary if) uses a constant value\r\n  for its test. This might not be what the user intended to do.\r\n:comparison-with-callable (W0143): *Comparing against a callable, did you omit the parenthesis?*\r\n  This message is emitted when pylint detects that a comparison with a callable\r\n  was made, which might suggest that some parenthesis were omitted, resulting in\r\n  potential unwanted behaviour.\r\n:lost-exception (W0150): *%s statement in finally block may swallow exception*\r\n  Used when a break or a return statement is found inside the finally clause of\r\n  a try...finally block: the exceptions raised in the try clause will be\r\n  silently swallowed instead of being re-raised.\r\n:assert-on-tuple (W0199): *Assert called on a 2-uple. Did you mean 'assert x,y'?*\r\n  A call of assert on a tuple will always evaluate to true if the tuple is not\r\n  empty, and will always evaluate to false if it is.\r\n:attribute-defined-outside-init (W0201): *Attribute %r defined outside __init__*\r\n  Used when an instance attribute is defined outside the __init__ method.\r\n:bad-staticmethod-argument (W0211): *Static method with %r as first argument*\r\n  Used when a static method has \"self\" or a value specified in valid-\r\n  classmethod-first-arg option or valid-metaclass-classmethod-first-arg option\r\n  as first argument.\r\n:protected-access (W0212): *Access to a protected member %s of a client class*\r\n  Used when a protected member (i.e. class member with a name beginning with an\r\n  underscore) is access outside the class or a descendant of the class where\r\n  it's defined.\r\n:arguments-differ (W0221): *Parameters differ from %s %r method*\r\n  Used when a method has a different number of arguments than in the implemented\r\n  interface or in an overridden method.\r\n:signature-differs (W0222): *Signature differs from %s %r method*\r\n  Used when a method signature is different than in the implemented interface or\r\n  in an overridden method.\r\n:abstract-method (W0223): *Method %r is abstract in class %r but is not overridden*\r\n  Used when an abstract method (i.e. raise NotImplementedError) is not\r\n  overridden in concrete class.\r\n:super-init-not-called (W0231): *__init__ method from base class %r is not called*\r\n  Used when an ancestor class method has an __init__ method which is not called\r\n  by a derived class.\r\n:no-init (W0232): *Class has no __init__ method*\r\n  Used when a class has no __init__ method, neither its parent classes.\r\n:non-parent-init-called (W0233): *__init__ method from a non direct base class %r is called*\r\n  Used when an __init__ method is called on a class which is not in the direct\r\n  ancestors for the analysed class.\r\n:useless-super-delegation (W0235): *Useless super delegation in method %r*\r\n  Used whenever we can detect that an overridden method is useless, relying on\r\n  super() delegation to do the same thing as another method from the MRO.\r\n:unnecessary-semicolon (W0301): *Unnecessary semicolon*\r\n  Used when a statement is ended by a semi-colon (\";\"), which isn't necessary\r\n  (that's python, not C ;).\r\n:bad-indentation (W0311): *Bad indentation. Found %s %s, expected %s*\r\n  Used when an unexpected number of indentation's tabulations or spaces has been\r\n  found.\r\n:mixed-indentation (W0312): *Found indentation with %ss instead of %ss*\r\n  Used when there are some mixed tabs and spaces in a module.\r\n:wildcard-import (W0401): *Wildcard import %s*\r\n  Used when `from module import *` is detected.\r\n:deprecated-module (W0402): *Uses of a deprecated module %r*\r\n  Used a module marked as deprecated is imported.\r\n:reimported (W0404): *Reimport %r (imported line %s)*\r\n  Used when a module is reimported multiple times.\r\n:import-self (W0406): *Module import itself*\r\n  Used when a module is importing itself.\r\n:misplaced-future (W0410): *__future__ import is not the first non docstring statement*\r\n  Python 2.5 and greater require __future__ import to be the first non docstring\r\n  statement in the module.\r\n:fixme (W0511):\r\n  Used when a warning note as FIXME or XXX is detected.\r\n:global-variable-undefined (W0601): *Global variable %r undefined at the module level*\r\n  Used when a variable is defined through the \"global\" statement but the\r\n  variable is not defined in the module scope.\r\n:global-variable-not-assigned (W0602): *Using global for %r but no assignment is done*\r\n  Used when a variable is defined through the \"global\" statement but no\r\n  assignment to this variable is done.\r\n:global-statement (W0603): *Using the global statement*\r\n  Used when you use the \"global\" statement to update a global variable. Pylint\r\n  just try to discourage this usage. That doesn't mean you cannot use it !\r\n:global-at-module-level (W0604): *Using the global statement at the module level*\r\n  Used when you use the \"global\" statement at the module level since it has no\r\n  effect\r\n:unused-import (W0611): *Unused %s*\r\n  Used when an imported module or variable is not used.\r\n:unused-variable (W0612): *Unused variable %r*\r\n  Used when a variable is defined but not used.\r\n:unused-argument (W0613): *Unused argument %r*\r\n  Used when a function or method argument is not used.\r\n:unused-wildcard-import (W0614): *Unused import %s from wildcard import*\r\n  Used when an imported module or variable is not used from a `'from X import\r\n  *'` style import.\r\n:redefined-outer-name (W0621): *Redefining name %r from outer scope (line %s)*\r\n  Used when a variable's name hides a name defined in the outer scope.\r\n:redefined-builtin (W0622): *Redefining built-in %r*\r\n  Used when a variable or function override a built-in.\r\n:redefine-in-handler (W0623): *Redefining name %r from %s in exception handler*\r\n  Used when an exception handler assigns the exception to an existing name\r\n:undefined-loop-variable (W0631): *Using possibly undefined loop variable %r*\r\n  Used when a loop variable (i.e. defined by a for loop or a list comprehension\r\n  or a generator expression) is used outside the loop.\r\n:cell-var-from-loop (W0640): *Cell variable %s defined in loop*\r\n  A variable used in a closure is defined in a loop. This will result in all\r\n  closures using the same value for the closed-over variable.\r\n:possibly-unused-variable (W0641): *Possibly unused variable %r*\r\n  Used when a variable is defined but might not be used. The possibility comes\r\n  from the fact that locals() might be used, which could consume or not the said\r\n  variable\r\n:self-cls-assignment (W0642): *Invalid assignment to %s in method*\r\n  Invalid assignment to self or cls in instance or class method respectively.\r\n:bare-except (W0702): *No exception type(s) specified*\r\n  Used when an except clause doesn't specify exceptions type to catch.\r\n:broad-except (W0703): *Catching too general exception %s*\r\n  Used when an except catches a too general exception, possibly burying\r\n  unrelated errors.\r\n:duplicate-except (W0705): *Catching previously caught exception type %s*\r\n  Used when an except catches a type that was already caught by a previous\r\n  handler.\r\n:try-except-raise (W0706): *The except handler raises immediately*\r\n  Used when an except handler uses raise as its first or only operator. This is\r\n  useless because it raises back the exception immediately. Remove the raise\r\n  operator or the entire try-except-raise block!\r\n:binary-op-exception (W0711): *Exception to catch is the result of a binary \"%s\" operation*\r\n  Used when the exception to catch is of the form \"except A or B:\". If intending\r\n  to catch multiple, rewrite as \"except (A, B):\"\r\n:raising-format-tuple (W0715): *Exception arguments suggest string formatting might be intended*\r\n  Used when passing multiple arguments to an exception constructor, the first of\r\n  them a string literal containing what appears to be placeholders intended for\r\n  formatting\r\n:keyword-arg-before-vararg (W1113): *Keyword argument before variable positional arguments list in the definition of %s function*\r\n  When defining a keyword argument before variable positional arguments, one can\r\n  end up in having multiple values passed for the aforementioned parameter in\r\n  case the method is called with keyword arguments.\r\n:logging-not-lazy (W1201): *Specify string format arguments as logging function parameters*\r\n  Used when a logging statement has a call form of \"logging.<logging\r\n  method>(format_string % (format_args...))\". Such calls should leave string\r\n  interpolation to the logging method itself and be written \"logging.<logging\r\n  method>(format_string, format_args...)\" so that the program may avoid\r\n  incurring the cost of the interpolation in those cases in which no message\r\n  will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.\r\n:logging-format-interpolation (W1202): *Use % formatting in logging functions and pass the % parameters as arguments*\r\n  Used when a logging statement has a call form of \"logging.<logging\r\n  method>(format_string.format(format_args...))\". Such calls should use %\r\n  formatting instead, but leave interpolation to the logging function by passing\r\n  the parameters as arguments.\r\n:logging-fstring-interpolation (W1203): *Use % formatting in logging functions and pass the % parameters as arguments*\r\n  Used when a logging statement has a call form of \"logging.method(f\"...\"))\".\r\n  Such calls should use % formatting instead, but leave interpolation to the\r\n  logging function by passing the parameters as arguments.\r\n:bad-format-string-key (W1300): *Format string dictionary key should be a string, not %s*\r\n  Used when a format string that uses named conversion specifiers is used with a\r\n  dictionary whose keys are not all strings.\r\n:unused-format-string-key (W1301): *Unused key %r in format string dictionary*\r\n  Used when a format string that uses named conversion specifiers is used with a\r\n  dictionary that contains keys not required by the format string.\r\n:bad-format-string (W1302): *Invalid format string*\r\n  Used when a PEP 3101 format string is invalid. This message can't be emitted\r\n  when using Python < 2.7.\r\n:missing-format-argument-key (W1303): *Missing keyword argument %r for format string*\r\n  Used when a PEP 3101 format string that uses named fields doesn't receive one\r\n  or more required keywords. This message can't be emitted when using Python <\r\n  2.7.\r\n:unused-format-string-argument (W1304): *Unused format argument %r*\r\n  Used when a PEP 3101 format string that uses named fields is used with an\r\n  argument that is not required by the format string. This message can't be\r\n  emitted when using Python < 2.7.\r\n:format-combined-specification (W1305): *Format string contains both automatic field numbering and manual field specification*\r\n  Used when a PEP 3101 format string contains both automatic field numbering\r\n  (e.g. '{}') and manual field specification (e.g. '{0}'). This message can't be\r\n  emitted when using Python < 2.7.\r\n:missing-format-attribute (W1306): *Missing format attribute %r in format specifier %r*\r\n  Used when a PEP 3101 format string uses an attribute specifier ({0.length}),\r\n  but the argument passed for formatting doesn't have that attribute. This\r\n  message can't be emitted when using Python < 2.7.\r\n:invalid-format-index (W1307): *Using invalid lookup key %r in format specifier %r*\r\n  Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the\r\n  argument passed for formatting doesn't contain or doesn't have that key as an\r\n  attribute. This message can't be emitted when using Python < 2.7.\r\n:anomalous-backslash-in-string (W1401): *Anomalous backslash in string: '%s'. String constant might be missing an r prefix.*\r\n  Used when a backslash is in a literal string but not as an escape.\r\n:anomalous-unicode-escape-in-string (W1402): *Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix.*\r\n  Used when an escape like \\u is encountered in a byte string where it has no\r\n  effect.\r\n:bad-open-mode (W1501): *\"%s\" is not a valid mode for open.*\r\n  Python supports: r, w, a[, x] modes with b, +, and U (only with r) options.\r\n  See http://docs.python.org/2/library/functions.html#open\r\n:redundant-unittest-assert (W1503): *Redundant use of %s with constant value %r*\r\n  The first argument of assertTrue and assertFalse is a condition. If a constant\r\n  is passed as parameter, that condition will be always true. In this case a\r\n  warning should be emitted.\r\n:deprecated-method (W1505): *Using deprecated method %s()*\r\n  The method is marked as deprecated and will be removed in a future version of\r\n  Python. Consider looking for an alternative in the documentation.\r\n:bad-thread-instantiation (W1506): *threading.Thread needs the target function*\r\n  The warning is emitted when a threading.Thread class is instantiated without\r\n  the target function being passed. By default, the first parameter is the group\r\n  param, not the target param.\r\n:shallow-copy-environ (W1507): *Using copy.copy(os.environ). Use os.environ.copy() instead.*\r\n  os.environ is not a dict object but proxy object, so shallow copy has still\r\n  effects on original object. See https://bugs.python.org/issue15373 for\r\n  reference.\r\n:invalid-envvar-default (W1508): *%s default type is %s. Expected str or None.*\r\n  Env manipulation functions return None or str values. Supplying anything\r\n  different as a default may cause bugs. See\r\n  https://docs.python.org/3/library/os.html#os.getenv.\r\n:subprocess-popen-preexec-fn (W1509): *Using preexec_fn keyword which may be unsafe in the presence of threads*\r\n  The preexec_fn parameter is not safe to use in the presence of threads in your\r\n  application. The child process could deadlock before exec is called. If you\r\n  must use it, keep it trivial! Minimize the number of libraries you call\r\n  into.https://docs.python.org/3/library/subprocess.html#popen-constructor\r\n:apply-builtin (W1601): *apply built-in referenced*\r\n  Used when the apply built-in function is referenced (missing from Python 3)\r\n:basestring-builtin (W1602): *basestring built-in referenced*\r\n  Used when the basestring built-in function is referenced (missing from Python\r\n  3)\r\n:buffer-builtin (W1603): *buffer built-in referenced*\r\n  Used when the buffer built-in function is referenced (missing from Python 3)\r\n:cmp-builtin (W1604): *cmp built-in referenced*\r\n  Used when the cmp built-in function is referenced (missing from Python 3)\r\n:coerce-builtin (W1605): *coerce built-in referenced*\r\n  Used when the coerce built-in function is referenced (missing from Python 3)\r\n:execfile-builtin (W1606): *execfile built-in referenced*\r\n  Used when the execfile built-in function is referenced (missing from Python 3)\r\n:file-builtin (W1607): *file built-in referenced*\r\n  Used when the file built-in function is referenced (missing from Python 3)\r\n:long-builtin (W1608): *long built-in referenced*\r\n  Used when the long built-in function is referenced (missing from Python 3)\r\n:raw_input-builtin (W1609): *raw_input built-in referenced*\r\n  Used when the raw_input built-in function is referenced (missing from Python\r\n  3)\r\n:reduce-builtin (W1610): *reduce built-in referenced*\r\n  Used when the reduce built-in function is referenced (missing from Python 3)\r\n:standarderror-builtin (W1611): *StandardError built-in referenced*\r\n  Used when the StandardError built-in function is referenced (missing from\r\n  Python 3)\r\n:unicode-builtin (W1612): *unicode built-in referenced*\r\n  Used when the unicode built-in function is referenced (missing from Python 3)\r\n:xrange-builtin (W1613): *xrange built-in referenced*\r\n  Used when the xrange built-in function is referenced (missing from Python 3)\r\n:coerce-method (W1614): *__coerce__ method defined*\r\n  Used when a __coerce__ method is defined (method is not used by Python 3)\r\n:delslice-method (W1615): *__delslice__ method defined*\r\n  Used when a __delslice__ method is defined (method is not used by Python 3)\r\n:getslice-method (W1616): *__getslice__ method defined*\r\n  Used when a __getslice__ method is defined (method is not used by Python 3)\r\n:setslice-method (W1617): *__setslice__ method defined*\r\n  Used when a __setslice__ method is defined (method is not used by Python 3)\r\n:no-absolute-import (W1618): *import missing `from __future__ import absolute_import`*\r\n  Used when an import is not accompanied by ``from __future__ import\r\n  absolute_import`` (default behaviour in Python 3)\r\n:old-division (W1619): *division w/o __future__ statement*\r\n  Used for non-floor division w/o a float literal or ``from __future__ import\r\n  division`` (Python 3 returns a float for int division unconditionally)\r\n:dict-iter-method (W1620): *Calling a dict.iter*() method*\r\n  Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks\r\n  these methods)\r\n:dict-view-method (W1621): *Calling a dict.view*() method*\r\n  Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks\r\n  these methods)\r\n:next-method-called (W1622): *Called a next() method on an object*\r\n  Used when an object's next() method is called (Python 3 uses the next() built-\r\n  in function)\r\n:metaclass-assignment (W1623): *Assigning to a class's __metaclass__ attribute*\r\n  Used when a metaclass is specified by assigning to __metaclass__ (Python 3\r\n  specifies the metaclass as a class statement argument)\r\n:indexing-exception (W1624): *Indexing exceptions will not work on Python 3*\r\n  Indexing exceptions will not work on Python 3. Use `exception.args[index]`\r\n  instead.\r\n:raising-string (W1625): *Raising a string exception*\r\n  Used when a string exception is raised. This will not work on Python 3.\r\n:reload-builtin (W1626): *reload built-in referenced*\r\n  Used when the reload built-in function is referenced (missing from Python 3).\r\n  You can use instead imp.reload or importlib.reload.\r\n:oct-method (W1627): *__oct__ method defined*\r\n  Used when an __oct__ method is defined (method is not used by Python 3)\r\n:hex-method (W1628): *__hex__ method defined*\r\n  Used when a __hex__ method is defined (method is not used by Python 3)\r\n:nonzero-method (W1629): *__nonzero__ method defined*\r\n  Used when a __nonzero__ method is defined (method is not used by Python 3)\r\n:cmp-method (W1630): *__cmp__ method defined*\r\n  Used when a __cmp__ method is defined (method is not used by Python 3)\r\n:input-builtin (W1632): *input built-in referenced*\r\n  Used when the input built-in is referenced (backwards-incompatible semantics\r\n  in Python 3)\r\n:round-builtin (W1633): *round built-in referenced*\r\n  Used when the round built-in is referenced (backwards-incompatible semantics\r\n  in Python 3)\r\n:intern-builtin (W1634): *intern built-in referenced*\r\n  Used when the intern built-in is referenced (Moved to sys.intern in Python 3)\r\n:unichr-builtin (W1635): *unichr built-in referenced*\r\n  Used when the unichr built-in is referenced (Use chr in Python 3)\r\n:map-builtin-not-iterating (W1636): *map built-in referenced when not iterating*\r\n  Used when the map built-in is referenced in a non-iterating context (returns\r\n  an iterator in Python 3)\r\n:zip-builtin-not-iterating (W1637): *zip built-in referenced when not iterating*\r\n  Used when the zip built-in is referenced in a non-iterating context (returns\r\n  an iterator in Python 3)\r\n:range-builtin-not-iterating (W1638): *range built-in referenced when not iterating*\r\n  Used when the range built-in is referenced in a non-iterating context (returns\r\n  an iterator in Python 3)\r\n:filter-builtin-not-iterating (W1639): *filter built-in referenced when not iterating*\r\n  Used when the filter built-in is referenced in a non-iterating context\r\n  (returns an iterator in Python 3)\r\n:using-cmp-argument (W1640): *Using the cmp argument for list.sort / sorted*\r\n  Using the cmp argument for list.sort or the sorted builtin should be avoided,\r\n  since it was removed in Python 3. Using either `key` or `functools.cmp_to_key`\r\n  should be preferred.\r\n:eq-without-hash (W1641): *Implementing __eq__ without also implementing __hash__*\r\n  Used when a class implements __eq__ but not __hash__. In Python 2, objects get\r\n  object.__hash__ as the default implementation, in Python 3 objects get None as\r\n  their default __hash__ implementation if they also implement __eq__.\r\n:div-method (W1642): *__div__ method defined*\r\n  Used when a __div__ method is defined. Using `__truediv__` and setting__div__\r\n  = __truediv__ should be preferred.(method is not used by Python 3)\r\n:idiv-method (W1643): *__idiv__ method defined*\r\n  Used when an __idiv__ method is defined. Using `__itruediv__` and\r\n  setting__idiv__ = __itruediv__ should be preferred.(method is not used by\r\n  Python 3)\r\n:rdiv-method (W1644): *__rdiv__ method defined*\r\n  Used when a __rdiv__ method is defined. Using `__rtruediv__` and\r\n  setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by\r\n  Python 3)\r\n:exception-message-attribute (W1645): *Exception.message removed in Python 3*\r\n  Used when the message attribute is accessed on an Exception. Use\r\n  str(exception) instead.\r\n:invalid-str-codec (W1646): *non-text encoding used in str.decode*\r\n  Used when using str.encode or str.decode with a non-text encoding. Use codecs\r\n  module to handle arbitrary codecs.\r\n:sys-max-int (W1647): *sys.maxint removed in Python 3*\r\n  Used when accessing sys.maxint. Use sys.maxsize instead.\r\n:bad-python3-import (W1648): *Module moved in Python 3*\r\n  Used when importing a module that no longer exists in Python 3.\r\n:deprecated-string-function (W1649): *Accessing a deprecated function on the string module*\r\n  Used when accessing a string function that has been deprecated in Python 3.\r\n:deprecated-str-translate-call (W1650): *Using str.translate with deprecated deletechars parameters*\r\n  Used when using the deprecated deletechars parameters from str.translate. Use\r\n  re.sub to remove the desired characters\r\n:deprecated-itertools-function (W1651): *Accessing a deprecated function on the itertools module*\r\n  Used when accessing a function on itertools that has been removed in Python 3.\r\n:deprecated-types-field (W1652): *Accessing a deprecated fields on the types module*\r\n  Used when accessing a field on types that has been removed in Python 3.\r\n:next-method-defined (W1653): *next method defined*\r\n  Used when a next method is defined that would be an iterator in Python 2 but\r\n  is treated as a normal function in Python 3.\r\n:dict-items-not-iterating (W1654): *dict.items referenced when not iterating*\r\n  Used when dict.items is referenced in a non-iterating context (returns an\r\n  iterator in Python 3)\r\n:dict-keys-not-iterating (W1655): *dict.keys referenced when not iterating*\r\n  Used when dict.keys is referenced in a non-iterating context (returns an\r\n  iterator in Python 3)\r\n:dict-values-not-iterating (W1656): *dict.values referenced when not iterating*\r\n  Used when dict.values is referenced in a non-iterating context (returns an\r\n  iterator in Python 3)\r\n:deprecated-operator-function (W1657): *Accessing a removed attribute on the operator module*\r\n  Used when accessing a field on operator module that has been removed in Python\r\n  3.\r\n:deprecated-urllib-function (W1658): *Accessing a removed attribute on the urllib module*\r\n  Used when accessing a field on urllib module that has been removed or moved in\r\n  Python 3.\r\n:xreadlines-attribute (W1659): *Accessing a removed xreadlines attribute*\r\n  Used when accessing the xreadlines() function on a file stream, removed in\r\n  Python 3.\r\n:deprecated-sys-function (W1660): *Accessing a removed attribute on the sys module*\r\n  Used when accessing a field on sys module that has been removed in Python 3.\r\n:exception-escape (W1661): *Using an exception object that was bound by an except handler*\r\n  Emitted when using an exception, that was bound in an except handler, outside\r\n  of the except handler. On Python 3 these exceptions will be deleted once they\r\n  get out of the except handler.\r\n:comprehension-escape (W1662): *Using a variable that was bound inside a comprehension*\r\n  Emitted when using a variable, that was bound in a comprehension handler,\r\n  outside of the comprehension itself. On Python 3 these variables will be\r\n  deleted outside of the comprehension.\r\n\r\n";
console.log("hi");
const regex = /\((.*?)\)/gm;

function find_error(id) {
	const regex = /\*(.*?)\*/;
	let location = pylint_data.indexOf(id.toString());
	if (location >= 0) {
		search_text = pylint_data.slice(location);
		lines = search_text.split(/\n/);
		error_message = []
		let l;
		for (var i =0; i < lines.length; i++) {
			l = lines[i];
				if (l.startsWith(':')){
					full_message = error_message.join("")
					replaced = id+"):"
					full_message = full_message.replace(replaced, "")
				// 	console.log(id)
				// 	console.log(full_message)
				// 	console.log("data")
				full_message = full_message.replace("Used", "Occurs")
				console.log(id);
				console.log(full_message);
					if(regex.exec(full_message) != null) {
					  replacorrr = regex.exec(full_message)[0];
					  return full_message.replace(replacorrr,"");
					} else {
					  return full_message;
					}

				// 	console.log(replacorrr);



				}
				error_message.push(l);
		}
	} else {
		return "No information at the moment";
	}
}

function process_all() {
// 	data = pylint_data.split(/\n/);
  var m;
  var keys =[]
  var values = []

  do {
      m =regex.exec(pylint_data);
      if (m) {
          // console.log(m[1], m[2]);
          if(m[1].length==5&&m[1][0].match(/[a-z]/i)){
            keys.push(m[1]);
          }
      }
  } while (m);

  // console.log(codes);

  for (var i = 0; i<keys.length; i++) {
    values.push(find_error(keys[i]));
  }
  console.log(values);

  var result = {};
  keys.forEach((key, i) => result[key] = values[i]);
  console.log(result);


}
process_all();
